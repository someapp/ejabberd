#!/bin/bash

# define default configuration
POLL=true
SMP=auto
ERL_MAX_PORTS=32000
ERL_PROCESSES=250000
ERL_MAX_ETS_TABLES=1400

# define default environment variables 
NODE=ejabberd
HOST=`hostname -s`
#HOST=LASTGEJABBERD302
VERSION=2.1.11
ERLANG_NODE=$NODE@$HOST
PATH=.:$PATH

# zsh compatibility
#setopt shwordsplit 2>/dev/null

# system platform setup
case `uname -m` in
    i[3456]86 ) CPU="x86" ;;
    i86pc) CPU="x86" ;;
    armv7*) CPU="armhf" ;;
    arm*l) CPU="armel" ;;
    * ) CPU=`uname -m | tr A-Z a-z` ;;
esac
OS=`uname -s | tr A-Z a-z`
echo $OS | grep "^win" >/dev/null 2>&1
if [ $? -eq 0 ] ; then
    ERL=erl.exe
    DBG=werl.exe
    ROOTDIR=..
    ARCHDIR=windows
    RUNDIR="$APPDATA\\ejabberd"
    $ERL -noshell -s erlang halt || {
        echo ""
        echo "There is a problem starting Erlang."
        echo "If the error you see is 14001, you need to install:"
        echo "  Microsoft Visual C++ 2005 SP1 Redistributable Package"
        echo "You can download that installer from www.microsoft.com"
        echo "You can also check the ejabberd Administrator Guide"
        echo ""
        sleep 20
        exit 126
    }
else
    ERL=erlexec
    DBG=erlexec
    HERE=`which "$0" 2>/dev/null || echo .`
    BASE=`dirname $HERE`/..
    ROOTDIR=`cd $BASE; pwd`
    ARCHDIR=${OS}-${CPU}
    RUNDIR="$ROOTDIR"
    ERLANG_COOKIE=`cat $RUNDIR/.erlang.cookie`
    LD_LIBRARY_PATH="$ROOTDIR/lib/$ARCHDIR"
    DYLD_LIBRARY_PATH="$LD_LIBRARY_PATH"
    export LD_LIBRARY_PATH
    export DYLD_LIBRARY_PATH
fi

# read custom configuration
CONFIG="$RUNDIR/conf/ejabberdctl.cfg"
[ -f "$CONFIG" ] && . "$CONFIG"
if [ $# -ne 0 ] ; then
    case $1 in
        --node) shift ; ERLANG_NODE=$1 ; shift ;;
    esac
fi

NAME=-name
[ "$ERLANG_NODE" = "${ERLANG_NODE%.*}" ] && NAME=-sname

if [ "$FIREWALL_WINDOW" = "" ] ; then
    KERNEL_OPTS=""
else
    KERNEL_OPTS="-kernel inet_dist_listen_min ${FIREWALL_WINDOW%-*} inet_dist_listen_max ${FIREWALL_WINDOW#*-}"
fi

if [ "$ARCHDIR" = "windows" ] ; then
    ERLANG_OPTS="-smp $SMP +P $ERL_PROCESSES $KERNEL_OPTS"
else
    ERLANG_OPTS="+K $POLL -smp $SMP +P $ERL_PROCESSES $KERNEL_OPTS"
    ulimit -n $ERL_MAX_PORTS 2>/dev/null
fi

# define environment variables
BINDIR="$ROOTDIR/bin"
EMU=beam
PROGNAME="$BINDIR/erl"
PATH="$BINDIR":$PATH
SASL_LOG_PATH="$RUNDIR/logs/erlang.log"
DATETIME=`date "+%Y%m%d-%H%M%S"`
ERL_CRASH_DUMP="$RUNDIR/logs/erl_crash_$DATETIME.dump"
ERL_INETRC="$RUNDIR/conf/inetrc"
EJABBERD_CONFIG_PATH="$RUNDIR/conf/ejabberd.cfg"
EJABBERD_MSGS_PATH="$ROOTDIR/lib/ejabberd-$VERSION/priv/msgs"
EJABBERD_SO_PATH="$ROOTDIR/lib/ejabberd-$VERSION/priv/lib"
EJABBERD_LOG_PATH="$RUNDIR/logs/ejabberd.log"
EJABBERD_DOC_PATH="$ROOTDIR/doc"
EJABBERD_DB="$RUNDIR/database/$ERLANG_NODE"

# export global variables
export ARCHDIR
export EMU
export ROOTDIR
export BINDIR
export PROGNAME
export EJABBERD_MSGS_PATH
export EJABBERD_SO_PATH
export EJABBERD_LOG_PATH
export EJABBERD_DOC_PATH
export SASL_LOG_PATH
export ERL_MAX_PORTS
export ERL_MAX_ETS_TABLES
export ERL_CRASH_DUMP
export ERL_INETRC

# start server
start()
{
    check_start
    exec $ERL $NAME $ERLANG_NODE $ERLANG_OPTS \
      -noinput -detached \
      -mnesia dir "\"$EJABBERD_DB\"" \
      -s ejabberd \
      -setcookie $ERLANG_COOKIE \
      -ejabberd config \"$EJABBERD_CONFIG_PATH\" \
                log_path \"$EJABBERD_LOG_PATH\" \
      -sasl sasl_error_logger \{file,\"$SASL_LOG_PATH\"\}
}

# start interactive server
live()
{
    check_start
    echo "--------------------------------------------------------------------"
    echo ""
    echo "IMPORTANT: ejabberd is going to start in LIVE (interactive) mode."
    echo "All log messages will be shown in the command shell."
    echo "You can interact with the ejabberd node if you know how to use it."
    echo "Please be extremely cautious with your actions,"
    echo "and exit immediately if you are not completely sure."
    echo ""
    echo "To exit this LIVE mode and stop ejabberd, press:"
    echo "  q().  and press the Enter key"
    echo ""
    echo "--------------------------------------------------------------------"
    echo "Press any key to continue"
    read foo
    echo ""
    $ERL $NAME $ERLANG_NODE $ERLANG_OPTS \
      -mnesia dir "\"$EJABBERD_DB\"" \
      -s ejabberd \
      -setcookie $ERLANG_COOKIE \
      -ejabberd config \"$EJABBERD_CONFIG_PATH\" \
                log_path \"$EJABBERD_LOG_PATH\" \
      -sasl sasl_error_logger \{file,\"$SASL_LOG_PATH\"\}
}

# attach to server
debug()
{
    echo "--------------------------------------------------------------------"
    echo ""
    echo "IMPORTANT: we will attempt to attach an INTERACTIVE shell"
    echo "to an already running ejabberd node."
    echo "If an ERROR is printed, it means the connection was not succesfull."
    echo "You can interact with the ejabberd node if you know how to use it."
    echo "Please be extremely cautious with your actions,"
    echo "and exit immediately if you are not completely sure."
    echo ""
    echo "To detach this shell from ejabberd, press:"
    echo "  control+c, control+c"
    echo ""
    echo "--------------------------------------------------------------------"
    echo "Press any key to continue"
    read foo
    echo ""
    $DBG $NAME ejabberd-dbg@${ERLANG_NODE#*@} \
      -hidden \
      -remsh $ERLANG_NODE
}

# common control function
ctl()
{
    $ERL $NAME ejabberd-ctl@${ERLANG_NODE#*@} \
      -hidden \
      -noinput \
      -s ejabberd_ctl -extra $ERLANG_NODE $@
    result=$?
    case $result in
    0) :;;
    *)
        echo ""
        echo "Commands to start an ejabberd node:"
        echo "  start  Start an ejabberd node in server mode"
        echo "  debug  Attach an interactive Erlang shell to a running ejabberd node"
        echo "  live   Start an ejabberd node in live (interactive) mode"
        echo "";;
    esac
    return $result
}

# stop epmd if there is no other running node
stop_epmd()
{
    epmd -names | grep -q name || epmd -kill
}

# make sure node not already running and node name unregistered
check_start()
{
    epmd -names 2>/dev/null | grep -q ${ERLANG_NODE%@*} && {
        ps ux | grep $ERLANG_NODE | grep -qv grep && {
            echo "ejabberd is already running."
            exit 4
        } || {
            ps ux | grep beam | grep -qv grep && {
                echo "ejabberd node is registered, but no ejabberd process has been found."
                echo "can not kill epmd as other erlang nodes are running."
                echo "please stop all erlang nodes, and call 'epmd -kill'."
                exit 5
            } || {
                epmd -kill
            }
        }
    }
}

# allow sync calls
wait_for_status()
{
    # args: status try delay
    # return: 0 OK, 1 KO
    timeout=$2
    status=4
    while [ $status -ne $1 ]; do 
        sleep $3
        let timeout=timeout-1
        [ $timeout -eq 0 ] && { 
            status=$1
        } || {
            ctl status > /dev/null
            status=$?
        }
    done
    [ $timeout -eq 0 ] && {
        status=1
    } || {
        status=0
    }
    return $status
}

# display ctl usage
usage()
{
    ctl
    exit
}

[ $# -lt 1 ] && usage
[ -d "$EJABBERD_DB" ] || mkdir -p "$EJABBERD_DB"
cd "$BINDIR"

case $1 in
    start) start;;
    debug) debug;;
    live) live;;
    started) wait_for_status 0 30 2;; # wait 30x2s before timeout
    stopped) wait_for_status 3 15 2; stop_epmd;; # wait 15x2s before timeout
    *) ctl $@;;
esac
